#!/bin/bash -e

RESOLV_CONF_HEAD_FILE="/etc/resolv.conf.head"
apply_cloudflare_dns() {
	echo "Setting DNS in ${RESOLV_CONF_HEAD_FILE}"
	echo "# [pi-topOS] START
#
# Set Cloudflare as DNS provider
#
nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 2606:4700:4700::1111
nameserver 2606:4700:4700::1001
#
# [pi-topOS] END" >"${RESOLV_CONF_HEAD_FILE}"
}

do_update_check() {
	echo "Checking updates"
	local display="${1}"
	trap '' HUP EXIT INT TERM QUIT
	while systemctl is-active --quiet pt-os-updater; do
		sleep 1
	done
	env DISPLAY="${display}" /usr/lib/pt-os-updater/check-now
}

get_display() {
	local display
	display="$(pgrep -a Xorg | awk '{print $3}')"
	[[ -n "${display}" ]] && echo "${display}"
}

attempt_check_for_updates() {
	echo "Attempting to check for updates"

	if ischroot; then
		echo "In a chroot environment - skipping..."
		return
	fi

	local display
	display="$(get_display)"

	if [[ -z "${display}" ]]; then
		echo "Unable to find a display"
		exit
	fi

	(do_update_check "${display}") &
}

previous_version_requires_patch() {
	local version_to_check_against="${1}"
	# Is new install or version is earlier than upgrade check
	[[ -z "${previous_version}" ]] && return 0
	dpkg --compare-versions "${previous_version}" lt "${version_to_check_against}" && return 0
	return 1
}

is_pi_top_os() {
	if [[ -f "/etc/pt-issue" ]]; then
		return 0
	else
		return 1
	fi
}

main() {
	if is_pi_top_os; then
		previous_version="${1}"

		# NOTE: some patches are checked on each boot -
		# 	see 'pt-os-mods' systemd service

		# Apply Cloudflare DNS
		if previous_version_requires_patch "6.1.0"; then
			apply_cloudflare_dns
		fi

		# Check for updates again (with new apt key)
		if previous_version_requires_patch "6.0.1"; then
			attempt_check_for_updates
		fi
	fi
}

case "${1}" in
configure)
	shift
	main "${@}"
	;;

abort-upgrade | abort-remove | abort-deconfigure) ;;

\
	*)

	echo "postinst called with unknown argument \`${1}'" >&2
	exit 1
	;;
esac

#DEBHELPER#

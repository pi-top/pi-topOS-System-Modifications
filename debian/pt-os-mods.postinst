#!/bin/bash -e

get_user_home_directories() {
	getent passwd | grep -wFf /etc/shells | awk -F':' '{print $(NF-1)}'
}

apply_audio_fix() {
	# Ensure 'dtparam=audio=on' is in /boot/config.txt
	raspi-config nonint set_config_var "dtparam=audio" "on" "/boot/config.txt"

	# For each user's home directory
	for home_dir in $(get_user_home_directories); do
		asoundrc_file="${home_dir}/.asoundrc"
		if [[ -f "${asoundrc_file}" ]]; then
			# Back it up
			mv "${asoundrc_file}" "${asoundrc_file}.bak"
		fi

		# Find card number corresponding to headphones
		card_number=$(aplay -l | grep Headphones | grep -o "card\\s[0-9]" | cut -d ' ' -f 2)
		if [ -z "${card_number}" ]; then
			card_number=1
		fi

		# Set audio card
		raspi-config nonint do_audio "${card_number}"
	done

	# notify user that a restart is required
	pt-notify-send \
		--expire-time=0 \
		--icon=dialog-warning \
		"Audio configuration updated" \
		"Please restart to apply changes"
}

RESOLV_CONF_HEAD_FILE="/etc/resolv.conf.head"
apply_cloudflare_dns() {
	echo "# [pi-topOS] START
#
# Set Cloudflare as DNS provider
#
nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 2606:4700:4700::1111
nameserver 2606:4700:4700::1001
#
# [pi-topOS] END" >"${RESOLV_CONF_HEAD_FILE}"
}

do_update_check() {
	local display="${1}"
	trap '' HUP EXIT INT TERM QUIT
	while systemctl is-active --quiet pt-os-updater; do
		sleep 1
	done
	env DISPLAY="${display}" /usr/lib/pt-os-updater/check-now
}

attempt_check_for_updates() {
	local display
	display="$(pgrep -a Xorg | awk '{print $3}')"

	if [[ -z "${display}" ]]; then
		echo "Unable to find a display"
		exit
	fi

	(do_update_check "${display}") &
}

previous_version_requires_patch() {
	local version_to_check_against="${1}"
	# Is new install or version is earlier than upgrade check
	[[ -z "${previous_version}" ]] || return 0
	dpkg --compare-versions "${previous_version}" lt "${version_to_check_against}" || return 0
}

is_pi_top_os() {
	if [[ -f "/etc/pt-issue" ]]; then
		return 0
	else
		return 1
	fi
}

main() {
	if is_pi_top_os; then
		previous_version="${2}"

		# Apply audio fix and notify user
		if previous_version_requires_patch "6.3.0"; then
			apply_audio_fix
		fi

		# Apply Cloudflare DNS
		if previous_version_requires_patch "6.1.0"; then
			apply_cloudflare_dns
		fi

		# Check for updates again (with new apt key)
		if previous_version_requires_patch "6.0.1"; then
			attempt_check_for_updates
		fi
	fi
}

case "${1}" in
configure)
	main "${@}"
	;;

abort-upgrade | abort-remove | abort-deconfigure) ;;

\
	*)

	echo "postinst called with unknown argument \`${1}'" >&2
	exit 1
	;;
esac

#DEBHELPER#
